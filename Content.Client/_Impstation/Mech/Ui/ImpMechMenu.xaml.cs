using Content.Client.UserInterface.Controls;
using Content.Client.UserInterface.Fragments;
using Content.Client.Mech.Ui;
using Content.Shared.Mech.Components;
using Content.Shared.NameIdentifier;
using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;

namespace Content.Client._Impstation.Mech.Ui;

[GenerateTypedNameReferences]
public sealed partial class ImpMechMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _ent = default!;

    private EntityUid _mech;

    public event Action<EntityUid>? OnRemoveButtonPressed;

    public Action<string>? NameChanged;

    private string _lastValidName;

    public ImpMechMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _lastValidName = NameLineEdit.Text;

        NameLineEdit.OnTextChanged += OnNameChanged;
        NameLineEdit.OnTextEntered += OnNameEntered;
        NameLineEdit.OnFocusExit += OnNameFocusExit;
    }

    public void SetEntity(EntityUid uid)
    {
        MechView.SetEntity(uid);
        _mech = uid;

        if (_ent.TryGetComponent<NameIdentifierComponent>(uid, out var nameIdentifierComponent))
        {
            NameIdentifierLabel.Visible = true;
            NameIdentifierLabel.Text = nameIdentifierComponent.FullIdentifier;

            var fullName = _ent.GetComponent<MetaDataComponent>(uid).EntityName;
            var name = fullName.Substring(0, fullName.Length - nameIdentifierComponent.FullIdentifier.Length - 1);
            NameLineEdit.Text = name;
        }
        else
        {
            NameIdentifierLabel.Visible = false;
            NameLineEdit.Text = _ent.GetComponent<MetaDataComponent>(uid).EntityName;
        }
    }

    public void UpdateMechStats()
{
        if (!_ent.TryGetComponent<MechComponent>(_mech, out var mechComp))
            return;

        var integrityPercent = mechComp.Integrity / mechComp.MaxIntegrity;
        IntegrityDisplayBar.Value = integrityPercent.Float();
        IntegrityDisplay.Text = Loc.GetString("mech-integrity-display", ("amount", (integrityPercent*100).Int()));

        if (mechComp.MaxEnergy != 0f)
        {
            var energyPercent = mechComp.Energy / mechComp.MaxEnergy;
            EnergyDisplayBar.Value = energyPercent.Float();
            EnergyDisplay.Text = Loc.GetString("mech-energy-display", ("amount", (energyPercent*100).Int()));
        }
        else
        {
            EnergyDisplayBar.Value = 0f;
            EnergyDisplay.Text = Loc.GetString("mech-energy-missing");
        }

        SlotDisplay.Text = Loc.GetString("mech-slot-display",
            ("amount", mechComp.MaxEquipmentAmount - mechComp.EquipmentContainer.ContainedEntities.Count));
}
    
    private void OnNameChanged(LineEdit.LineEditEventArgs obj)
    {
        if (obj.Text.Length == 0 ||
            string.IsNullOrWhiteSpace(obj.Text) ||
            string.IsNullOrEmpty(obj.Text))
        {
            return;
        }

        if (obj.Text.Length > HumanoidCharacterProfile.MaxNameLength)
        {
            obj.Control.Text = obj.Text.Substring(0, HumanoidCharacterProfile.MaxNameLength);
        }

        _lastValidName = obj.Control.Text;
        obj.Control.Text = _lastValidName;
    }

    private void OnNameEntered(LineEdit.LineEditEventArgs obj)
    {
        NameChanged?.Invoke(_lastValidName);
    }

    private void OnNameFocusExit(LineEdit.LineEditEventArgs obj)
    {
        if (obj.Text.Length > HumanoidCharacterProfile.MaxNameLength ||
            obj.Text.Length == 0 ||
            string.IsNullOrWhiteSpace(obj.Text) ||
            string.IsNullOrEmpty(obj.Text))
        {
            obj.Control.Text = _lastValidName.Trim();
        }

        NameChanged?.Invoke(_lastValidName);
    }

    public void UpdateEquipmentView()
    {
        if (!_ent.TryGetComponent<MechComponent>(_mech, out var mechComp))
            return;

        EquipmentControlContainer.Children.Clear();
        foreach (var ent in mechComp.EquipmentContainer.ContainedEntities)
        {
            if (!_ent.TryGetComponent<MetaDataComponent>(ent, out var metaData))
                continue;

            var uicomp = _ent.GetComponentOrNull<UIFragmentComponent>(ent);
            var ui = uicomp?.Ui?.GetUIFragmentRoot();

            var control = new ImpMechEquipmentControl(ent, metaData.EntityName, ui);

            control.OnRemoveButtonPressed += () => OnRemoveButtonPressed?.Invoke(ent);

            EquipmentControlContainer.AddChild(control);
        }
    }
}

